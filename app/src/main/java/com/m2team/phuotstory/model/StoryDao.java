package com.m2team.phuotstory.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.m2team.phuotstory.model.Story;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY".
*/
public class StoryDao extends AbstractDao<Story, Long> {

    public static final String TABLENAME = "STORY";

    /**
     * Properties of entity Story.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property ShortTitleLocation = new Property(3, String.class, "shortTitleLocation", false, "SHORT_TITLE_LOCATION");
        public final static Property FullLocationList = new Property(4, String.class, "fullLocationList", false, "FULL_LOCATION_LIST");
        public final static Property PhotoUri = new Property(5, String.class, "photoUri", false, "PHOTO_URI");
        public final static Property Friends = new Property(6, String.class, "friends", false, "FRIENDS");
        public final static Property Feeling = new Property(7, String.class, "feeling", false, "FEELING");
        public final static Property TravelTime = new Property(8, Long.class, "travelTime", false, "TRAVEL_TIME");
        public final static Property CreatedTime = new Property(9, Long.class, "createdTime", false, "CREATED_TIME");
        public final static Property Distance = new Property(10, Double.class, "distance", false, "DISTANCE");
    };


    public StoryDao(DaoConfig config) {
        super(config);
    }
    
    public StoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"SHORT_TITLE_LOCATION\" TEXT," + // 3: shortTitleLocation
                "\"FULL_LOCATION_LIST\" TEXT," + // 4: fullLocationList
                "\"PHOTO_URI\" TEXT," + // 5: photoUri
                "\"FRIENDS\" TEXT," + // 6: friends
                "\"FEELING\" TEXT," + // 7: feeling
                "\"TRAVEL_TIME\" INTEGER," + // 8: travelTime
                "\"CREATED_TIME\" INTEGER," + // 9: createdTime
                "\"DISTANCE\" REAL);"); // 10: distance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Story entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String shortTitleLocation = entity.getShortTitleLocation();
        if (shortTitleLocation != null) {
            stmt.bindString(4, shortTitleLocation);
        }
 
        String fullLocationList = entity.getFullLocationList();
        if (fullLocationList != null) {
            stmt.bindString(5, fullLocationList);
        }
 
        String photoUri = entity.getPhotoUri();
        if (photoUri != null) {
            stmt.bindString(6, photoUri);
        }
 
        String friends = entity.getFriends();
        if (friends != null) {
            stmt.bindString(7, friends);
        }
 
        String feeling = entity.getFeeling();
        if (feeling != null) {
            stmt.bindString(8, feeling);
        }
 
        Long travelTime = entity.getTravelTime();
        if (travelTime != null) {
            stmt.bindLong(9, travelTime);
        }
 
        Long createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(10, createdTime);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(11, distance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Story readEntity(Cursor cursor, int offset) {
        Story entity = new Story( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortTitleLocation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fullLocationList
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photoUri
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // friends
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // feeling
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // travelTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // createdTime
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // distance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Story entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortTitleLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullLocationList(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhotoUri(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFriends(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeeling(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTravelTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCreatedTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDistance(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Story entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Story entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
